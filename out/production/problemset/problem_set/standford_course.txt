05/03 programming Abstraction: Lecture 7
----------------------------------------------------------
    read a file, put all word with same set of character into a group

    public static void main(String[] args){

        BufferedReader reader = readFile("doc.txt");
        Map<String, Set<String>> words = new HashMap<>();

        try {
            while (true){
                String line = reader.readLine();
                if( line == null) break;
                line.trim().replaceAll("( )+", " ");
                for ( String word: line.split(" ")){
                    String key = sortString(word);
                    if(words.keySet().contains(key)){
                        words.get(key).add(word);
                    }else {
                        Set<String> newSet = new HashSet<>();
                        newSet.add(word);
                        words.put(key, newSet);
                    }
                }
            }
            System.out.println("total size: " + words.size());
            String maxKey = "";
            int maxSize = 0;
            for( String key: words.keySet()){
                System.out.print("key: " + key);
                for( String s: words.get(key)){
                    System.out.print(" " + s);
                }
                if(words.get(key).size() > maxSize){
                    maxKey = key;
                    maxSize = words.get(key).size();
                }
                System.out.println();
            }
            System.out.println("max: " + maxKey + " size: " + maxSize);

        }catch (Exception e){
            e.printStackTrace();
        }

    }

    public static String sortString( String s){
        char [] array = removeNonChar(s);

        for( int i = 0 ; i < array.length; i++){
            int minIndex = i;
            for( int j = i+1 ; j < array.length; j++){
                if(array[j] < array[minIndex])
                    minIndex = j;
            }
            swap(array, i, minIndex);
        }
        return new String(array);
    }

    public static char [] removeNonChar(String s){
        char [] array = s.toLowerCase().toCharArray();
        String rel = "";
        for( int i = 0 ; i < array.length; i++){
            if( Character.isLetter(array[i])){
                if('a' <= array[i] && array[i] <= 'z') {
                    rel += array[i];
                }
            }
        }
        return rel.toCharArray();
    }

    public static void swap(char [] array, int i, int j ){
        char temp = array[i];
        array[i] = array[j];
        array[j] = temp;
    }

    public static BufferedReader readFile (String name){
        BufferedReader reader = null;

        try {
            reader = new BufferedReader(new FileReader((name)));
        }catch (Exception e){
            e.printStackTrace();
        }
        return reader;
    }

-----------------------------------------------------------------------
    Recursive palindrome
     public static void main(String[] args){

            Scanner sc = new Scanner(System.in);
            while (true){
                String line = sc.nextLine();
                if(line.equals("")) break;
                System.out.println(isPalindrome(line));
            }

        }

        public static boolean isPalindrome(String s){
            if( s.length() <= 1){
                return  true;
            }else {
                return (s.charAt(0) == s.charAt(s.length() -1) && isPalindrome(s.substring(1, s.length() -1)));
            }
        }

-----------------------------------------------------------------------------------------
    Recursive Binary Search

   * Wrong base case: if (high < low) return -1;

 public static void main(String[] args){

        Scanner sc = new Scanner(System.in);
        int [] array = {1, 2, 3, 4, 9 , 10, 15, 20, 25};
        System.out.println(binarySearch(array, 0, array.length -1, 25));

    }

    public static int binarySearch (int[] array, int low, int high, int key){
        if(array.length == 0 ) return -1;
        if( high < low ) return  -1;

        int mid = low + (high - low) /2;
        if( array[mid] == key)
            return mid;
        else if( array[mid] < key){
            return binarySearch(array, mid+1, high, key);
        }else return binarySearch(array, low, mid -1, key);


    }


-----------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------

