   02/12 UVA 100 The 3n + 1 problem
- Problem : some time output 0 > wrong because assume that i <= j, which is wrong
- use sc.hasNextInt() to read input

My Own answer code
    public static void main(String [] args) throws  Exception{
        Scanner sc = new Scanner(new FileReader("in.txt"));
        StringBuilder sb = new StringBuilder();
        while (sc.hasNextInt()){
            int a = sc.nextInt();
            int b = sc.nextInt();
            int i = a < b ? a : b;
            int j = a >= b ? a : b;
            int max = 0 , current;
            for ( int k = i; k <= j; k++){
                current = check(k);
                if (current > max)
                    max = current;
            }
//            System.out.println(i + " " + j + " " + max);
            sb.append(i + " " + j + " " + max + System.lineSeparator());  [WRONG]
        }
        writeOutput(sb);
        System.out.println("compare: " + checkOutput());

    }
    public static int check(int n){
        int count = 1;
        while (n != 1){
            if( n %2 ==0 )
                n = n/2;
            else n = 3 * n + 1;
            count ++;
        }
        return count;
    }
    public static int checkOutput(){
        String expected = null, output = null, line;
        BufferedReader reader = null;
        Charset charset = Charset.forName("US-ASCII");
        StringBuilder sb = new StringBuilder();
        Path expectedFile = Paths.get("expected.txt");
        Path outputFile = Paths.get("out.txt");
        try{
            reader = Files.newBufferedReader(expectedFile, charset);
            while ( (line = reader.readLine()) != null){
                sb.append(line + System.lineSeparator());
            }
            expected = sb.toString();
//            System.out.println("Expected: " + expected);
            sb = new StringBuilder();
            reader = Files.newBufferedReader(outputFile, charset);
            while ( (line = reader.readLine()) != null){
                sb.append(line + System.lineSeparator());
            }
            output = sb.toString();
//            System.out.println("Output: " + output);

        }catch (IOException x){
            System.err.format("IO Exception %s%n", x);
        }
        return output.compareTo(expected);

    }
    public static void writeOutput(StringBuilder sb){
        Charset charset = Charset.forName("US-ASCII");
        Path outputFile = Paths.get("out.txt");
        String output = sb.toString();
        try {
            BufferedWriter bufferedWriter = Files.newBufferedWriter(outputFile, charset);
            bufferedWriter.write(output, 0, output.length());
            bufferedWriter.close();
        } catch (IOException x) {
            System.err.format("IOException: %s%n", x);
        }
    }
- Sample code
// @JUDGE_ID:  1000AA  100  Java  "Easy algorithm"

import java.io.*;
import java.util.*;

class nguyen_dac_khue.Exam2.Main
{
    static String ReadLn (int maxLg)  // utility function to read from stdin
    {
        byte lin[] = new byte [maxLg];
        int lg = 0, car = -1;
        String line = "";

        try
        {
            while (lg < maxLg)
            {
                car = System.in.read();
                if ((car < 0) || (car == '\n')) break;
                lin [lg++] += car;
            }
        }
        catch (IOException e)
        {
            return (null);
        }

        if ((car < 0) && (lg == 0)) return (null);  // eof
        return (new String (lin, 0, lg));
    }

    public static void main (String args[])  // entry point from OS
    {
        nguyen_dac_khue.Exam2.Main myWork = new nguyen_dac_khue.Exam2.Main();  // create a dinamic instance
        myWork.Begin();            // the true entry point
    }

    void Begin()
    {
        String input;
        StringTokenizer idata;
        int a, b, min, max, num, n, cycle, cyclemax;

        while ((input = nguyen_dac_khue.Exam2.Main.ReadLn (255)) != null)
        {
          idata = new StringTokenizer (input);
          a = Integer.parseInt (idata.nextToken());
          b = Integer.parseInt (idata.nextToken());
          if (a < b) { min=a; max=b; } else { min=b; max=a; }
          for (cyclemax=-1, num=min; num<=max; num++) {
            for (n=num, cycle=1; n != 1; cycle++) if ((n % 2) != 0) n=3*n+1; else n >>= 1;
            if (cycle > cyclemax) cyclemax=cycle;
            }
          System.out.println (a + " " + b + " " + cyclemax);
        }
    }
}
------------------------------------------
   UVA 272	TEX Quotes
public static void main (String args[])  // entry point from OS
    {
        Scanner sc = new Scanner(System.in);
        String line, temp;
        char [] chars;
        StringBuilder sb;

        boolean first = false;
        while (sc.hasNext()){
            line = sc.nextLine();
            chars = line.toCharArray();
            sb = new StringBuilder();
            for (int i = 0 ; i < chars.length; i++){
                if( chars[i] == '"'){
                    first = !first;
                    temp = first ? "``" : "''";
                    sb.append(temp);
                }else {
                    sb.append(chars[i]);
                }
            }
            System.out.println(sb.toString());
        }
    }
--------------------------------------------------------------
    UVA 394	Mapmaker
 public static void main (String args[])  throws Exception// entry point from OS
    {
        Scanner sc = new Scanner(System.in);
        int N, R;
        String line, updateLine;
        String [] ar;
        String name, indexString;
        int base, Cd, D, count, index;
        Element element;
        Map<String, Element> map = new HashMap<String, Element>();
        int[][] array;
        int [] addressIndex;
        N = sc.nextInt();
        R = sc.nextInt();
        line = sc.nextLine();
        while (N-- > 0){
            line = sc.nextLine();
            line = line.trim().replaceAll("( )+", " ");
            ar = line.split(" ");

            name = ar[0];
            base = Integer.parseInt(ar[1]);
            Cd = Integer.parseInt(ar[2]);
            D = Integer.parseInt(ar[3]);
            array = new int[D][2];
            for( count = 4, index = 0; index<D; index++){
                array[index][0] = Integer.parseInt(ar[count++]);
                array[index][1] = Integer.parseInt(ar[count++]);
            }
            element = new Element(name, base, Cd, D, array);
            map.put(name, element);
        }
        while (R -- > 0){
            line = sc.nextLine();
            line = line.trim().replaceAll("( )+", " ");
            ar = line.split(" ");

            name = ar[0];
            indexString ="[";
            addressIndex = new int[ar.length -1];
            for( count = 1, index = 0; index<ar.length -1 ; index++){
                addressIndex[index] = Integer.parseInt(ar[count++]);
                indexString += String.valueOf(addressIndex[index]);
                if(index != ar.length -2 ) indexString += ", ";
            }
            indexString += "] = ";
            Element ele = map.get(name);
            if(ele != null)
                System.out.println( name + indexString + ele.address(addressIndex));
        }
    }

     static void print(Element element) {
        System.out.println("name: " + element.name);
        for ( int i = 0 ; i < element.D; i++){
            System.out.println("array: " + element.UpperLower[i][0] + " " + element.UpperLower[i][1]);
        }
    }

     static class Element{
        String name;
        int base;
        int Cd;
        int D;
        int[][] UpperLower;
        int[] CArray;
        int C0;
         Element(String name, int base, int Cd, int D, int[][] array){
            this.name = name;
            this.base = base;
            this.Cd = Cd;
            this.D = D;
            this.UpperLower = array;
            this.CArray = new int[D + 1];
            CArray[D] = Cd;
            int sum = Cd * UpperLower[D-1][0];
            for( int i = D-1; i >= 1; i--){
                CArray[i] = CArray[i+1] * (UpperLower[i][1] - UpperLower[i][0] + 1);
                sum += CArray[i] * UpperLower[i-1][0];
            }
            C0 = base - sum;
        }
         int address(int [] array){
            int sum = 0 ;
            for ( int i = 0 ; i < array.length; i++){
                sum += array[i] * CArray[i+1];
            }
            return C0 + sum;
        }
    }
---------------------------------------------------------------
    UVA 483 - Word Scramble
Problem: does not trim string ( keep the space between word, begin and end space also.
public static void main (String args[])  throws Exception// entry point from OS
    {
        Scanner sc = new Scanner(new FileReader("in.txt"));
        int N, R;
        String line, updateLine;
        String[] ar;
        char [] chars;
        int begin = -1, end = -1, count = 0 ;
        char temp;
        while (sc.hasNext())
        {
            line = sc.nextLine();
            chars = line.toCharArray();
            for ( int i = 0 ; i < chars.length; i++){
                if( chars[i] != ' '){
                    count++;
                    if( begin == -1) {
                        begin = i;
                        System.out.println("begin: " + i);
                    }
                }else {
                    if( begin != -1){
                        System.out.println("begin: " + begin + " count: "+  count);
                        swap(chars, begin, begin + count);
                        begin = -1;
                        count = 0;
                    }
                }
            }
            updateLine = String.valueOf(chars);
//            for( String s : ar){
//                chars = s.toCharArray();
////                System.out.println("String : " + s + " char: " + String.valueOf(chars));
//
//                for ( int i = 0; i < chars.length/2; i++){
//                    temp = chars[i];
//                    chars[i] = chars[chars.length -1 -i];
//                    chars[chars.length -1 - i] = temp;
//                }
////                System.out.println(String.valueOf(chars));
//
//                updateLine += String.valueOf(chars) + " ";
//            }
//            updateLine.trim();
            System.out.println(updateLine);
        }
    }

     static void swap(char[] chars, int begin, int end) {
         char temp; int count, i;
         for ( i = 0, count = begin; count < (end + begin ) /2; count++, i++){
             temp = chars[count];
             chars[count] = chars[end -i];
             chars[end -i] = temp;
         }
         System.out.println("Cahr: " + String.valueOf(chars));
    }
----------------------------------------------------------
            573 - The Snailg
            Careful: sucess > H
                    failure < 0
                     day = count + 1
                     if currentU <= 0, curentU = 0;

    {
        Scanner sc = new Scanner(System.in);
//        Scanner sc = new Scanner(new FileReader("in.txt"));
        int H, U, D, F;
        String output = "";
        while (sc.hasNextInt()){
            H = sc.nextInt();
            if( H == 0 )
                break;
            U = sc.nextInt();
            D = sc.nextInt();
            F = sc.nextInt();
            int count = 0;
            double decrease = 1.0 * (U * F ) /100;
            double currentU = U, HDay = 0, HNight = 0;
            boolean success = false;
            while (true){
                currentU = U - decrease * count ;
                if( currentU <= 0) currentU = 0;
                HDay = HNight + currentU;
                if( HDay > H){
                    success = true;
                    break;
                }
                HNight = HDay - D;
                if(HNight < 0){
                    success= false;
                    break;
                }
                count++;
//                System.out.println(" after day: " + count + " U: " + currentU + " Hday: " + HDay + " Night: " + HNight );
            }
//            System.out.println(" after day: " + count + " U: " + currentU + " Hday: " + HDay + " Night: " + HNight );
            String s = (success ? "success" : "failure") + " on day " + (count+ 1) + "\n";
            output += s;
        }
        System.out.println(output);

    }


----------------------------------------------------------
    661 	Blowing Fuses
    Note : careful: each sequence has a line break in between in answers

    public static void main (String args[])  throws Exception// entry point from OS
    {
        Scanner sc = new Scanner(System.in);
//        Scanner sc = new Scanner(new FileReader("in.txt"));
        int n, m, c;
        int count = 1;
        while (sc.hasNextInt()){
            n = sc.nextInt();
            if( n == 0 )
                break;
            m = sc.nextInt();
            c = sc.nextInt();

            int [] device = new int[n];
            int [] device_on = new int[n];
            int [] sequence = new int[m];

            int sum = 0 , max = 0 ;
            boolean blown = false;

            for( int i = 0 ; i < n; i++){
                device[i] = sc.nextInt();
                device_on[i] = 0;
            }

            for( int i =0 ; i < m; i++){
                sequence[i] = sc.nextInt();
            }

            for( int i = 0 ; i < m; i++){
                device_on[sequence[i] -1 ] =  device_on[sequence[i] -1 ] == 0 ? 1 : 0 ;
                sum = getSum(device, device_on);
                if( sum > max ) max = sum;
                if( sum > c ){
                    blown = true;
                    break;
                }
            }
            System.out.println("Sequence " + count);
            if(blown){
                System.out.println("Fuse was blown.");
            }else {
                System.out.println("Fuse was not blown.");
                System.out.println("Maximal power consumption was " + max + " amperes.");
            }
            System.out.println();
            count++;
        }

    }
    public static int getSum(int [] device, int[] device_on)
    {
        int sum = 0 ;
        for ( int i = 0 ; i < device.length; i++){
            if( device_on[i] == 1)
                sum += device[i];
        }
        return sum;
    }
----------------------------------------------------------
    482 - Permutation Arrays
    Careful: how to capture input,
     also output should be a vector of string, instead of double

  public static void main (String args[])  throws Exception// entry point from OS
    {
        Scanner sc = new Scanner(System.in);
//        Scanner sc = new Scanner(new FileReader("in.txt"));
        int n;
        n = Integer.valueOf(sc.nextLine());
        int a, b;
        for ( int i = 0 ; i < n; i++){

            Vector<Integer> index = new Vector<>();
            Vector<String> value = new Vector<>();
            String first = sc.nextLine();
            String indexStr = sc.nextLine();
            String valueStr = sc.nextLine();

            for( String s: indexStr.split(" ")){
                index.add(Integer.valueOf(s));
            }
            for( String s: valueStr.split(" ")){
                value.add(s);
            }
//            printInt(index);
//            printDouble(value);
            for ( int j = 1 ; j <= index.size(); j++){
                System.out.println(value.elementAt(index.indexOf(j)));
            }
            System.out.println();

        }


    }
    public static void printInt(Vector<Integer> integers){
        for( Integer integer: integers){
            System.out.print(integer);
        }
        System.out.println();
    }
    public static void printDouble(Vector<String> integers){
        for( String integer: integers){
            System.out.print(integer);
        }
        System.out.println();
    }
----------------------------------------------------------
        482	Permutation Arrays
public class Main {
    private static Scanner sc = new Scanner(System.in);
    public static void main(String[] args){
        int n = Integer.valueOf(sc.nextLine().trim());
        String firstLine, secondLine;
        while (n-- > 0){
            int size = 0;
            sc.nextLine();
            firstLine = sc.nextLine();
            secondLine = sc.nextLine();

            ArrayList<Integer> firstList = new ArrayList<Integer>();
            ArrayList<String> secondList = new ArrayList<String>();

            for( String s: firstLine.trim().split(" ")){
                firstList.add(Integer.valueOf(s));
            }
            for( String s: secondLine.trim().split(" ")){
                secondList.add(s);
            }

            size = firstList.size();
            for( int i = 1 ; i <= size; i++){
                int index = firstList.indexOf(i);
                if(index >= 0)
                    echo(secondList.get(index));
            }
            if(n > 0) echo("");
        }
    }

    public static void echo(String s){
        System.out.println(s);
    }
}

----------------------------------------------------------
    UVa 594
    public static int bitToLittle(int i) {
        return ( (i<<24)+ ((i<<8)&0x00FF0000)+ ((i>>8)&0x0000FF00)+(i>>>24));
    }

----------------------------------------------------------
    11340	Newspaper

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.BitSet;
import java.util.HashMap;
import java.util.Scanner;

public class Main {
//    private static Scanner sc = new Scanner(System.in);

    public static void main(String[] args) throws Exception{
        double sum;
        String line;
        HashMap<Character, Integer> valueMap = new HashMap<Character, Integer>();
        BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));
        PrintWriter pr = new PrintWriter(System.out);

        int n = Integer.valueOf(bf.readLine());
        while (n-- > 0){
            sum = 0;
            int k  = Integer.valueOf(bf.readLine());
            for(int i = 0 ; i < k; i++){
                line = bf.readLine();
                String[] split = line.trim().split(" ");
                char c = split[0].charAt(0);
                int value = Integer.valueOf(split[1]);
                valueMap.put(c, value);
            }

            int m = Integer.valueOf(bf.readLine());
            for( int i = 0 ; i < m; i++){
                line = bf.readLine();
                char[] chars = line.trim().toCharArray();
                for(char c: chars){
                    if(valueMap.keySet().contains(c)){
                        sum += valueMap.get(c);
                    }
                }
            }

            valueMap.clear();
            sum /= 100;
            System.out.println(  String.format("%.2f", sum) + "$");
        }
    }
}

----------------------------------------------------------
    UVa 10194 - Football a.k.a. Soccer

    private static Scanner sc = new Scanner(System.in);

        public static void main(String[] args) throws Exception{
            int n = sc.nextInt();
            sc.nextLine();
            while (n-- > 0){
                HashMap<String, Team> teamMap = new HashMap<String, Team>();
                List<Match> matchList = new ArrayList<Match>();

                String tourName = sc.nextLine();
                int noTeam = Integer.valueOf(sc.nextLine());

                while (noTeam-- > 0){
                    String teamName = sc.nextLine();
                    teamMap.put(teamName, new Team(teamName));
                }

                int noMatch = Integer.valueOf(sc.nextLine());
                while (noMatch-- > 0){
                    matchList.add(Match.newMatch(sc.nextLine()));
                }

                System.out.println(tourName);
                System.out.println(calculateScore(teamMap, matchList));

            }
        }

        private static String calculateScore(HashMap<String, Team> teamMap, List<Match> matchList) {
            String output = "";

            for(Match match: matchList){
                Team firstTeam = teamMap.get(match.getFirstTeam());
                Team secondTeam = teamMap.get(match.getSecondTeam());

                firstTeam.setGoalScore(firstTeam.getGoalScore() + match.getFirstScore());
                secondTeam.setGoalScore(secondTeam.getGoalScore() + match.getSecondScore());

                firstTeam.setGoalAgainst(firstTeam.getGoalAgainst() + match.getSecondScore());
                secondTeam.setGoalAgainst(secondTeam.getGoalAgainst() + match.getFirstScore());

                if(match.getFirstScore() < match.getSecondScore()){
                    firstTeam.setLooseGame(firstTeam.getLooseGame() + 1);
                    secondTeam.setWinGame(secondTeam.getWinGame() + 1);
                    secondTeam.setScore(secondTeam.getScore() + 3);

                }else if(match.getFirstScore() == match.getSecondScore()){
                    firstTeam.setTieGame(firstTeam.getTieGame() + 1);
                    secondTeam.setTieGame(secondTeam.getTieGame() + 1);

                    secondTeam.setScore(secondTeam.getScore() + 1);
                    firstTeam.setScore(firstTeam.getScore() + 1);

                }else {

                    firstTeam.setWinGame(firstTeam.getWinGame() + 1);
                    secondTeam.setLooseGame(secondTeam.getLooseGame() + 1);
                    firstTeam.setScore(firstTeam.getScore() + 3);
                }
            }

            List<Team> teamList = new ArrayList<Team>(teamMap.values());
            sortTeam(teamList);
            output = prepareString(teamList);
            return output;
        }

        private static String prepareString(List<Team> teamList) {
            String output = "";
            for(int i = 0 ; i < teamList.size(); i++){
                Team team = teamList.get(teamList.size() -1 - i);
                output += (i+1) + ") " + team.getName() + " " + team.getScore() + "p, "
                        + (team.getWinGame()  + team.getTieGame() + team.getLooseGame()) + "g, ("
                        + team.getWinGame() + "-" + team.getTieGame() +"-" + team.getLooseGame() + "), "
                        + (team.getGoalScore() - team.getGoalAgainst()) + "gd ("
                        + team.getGoalScore() + "-" + team.getGoalAgainst() +")" + "\n";
            }
            return output;
        }

        private static void sortTeam(List<Team> values) {
            Collections.sort(values, new Comparator<Team>() {
                @Override
                public int compare(Team o1, Team o2) {
                    if(o1.getScore() == o2.getScore()){
                        if(o1.getWinGame() == o2.getWinGame()){
                            if((o1.getGoalScore() - o1.getGoalAgainst()) == (o2.getGoalScore() - o2.getGoalAgainst())){
                                if(o1.getGoalScore() == o2.getGoalScore()){
                                    if(o1.getGoalAgainst() == o2.getGoalAgainst()){
                                        return o1.getName().compareTo(o2.getName());
                                    }else {
                                        return o1.getGoalAgainst() - o2.getGoalAgainst();
                                    }
                                }else {
                                    return o1.getGoalScore() - o2.getGoalScore();
                                }
                            }else {
                                return (o1.getGoalScore() - o1.getGoalAgainst()) - (o2.getGoalScore() - o2.getGoalAgainst());
                            }
                        }else {
                            return o1.getWinGame() - o2.getWinGame();
                        }
                    }else {
                        return o1.getScore() - o2.getScore();
                    }
                }
            });
        }

        static class Team {
            private String name;
            int winGame, tieGame, looseGame, goalScore, goalAgainst, score, rank;

            public String getName() {
                return name;
            }

            public void setName(String name) {
                this.name = name;
            }

            public Team(String name) {
                this.name = name;
            }

            public int getWinGame() {
                return winGame;
            }

            public void setWinGame(int winGame) {
                this.winGame = winGame;
            }

            public int getTieGame() {
                return tieGame;
            }

            public void setTieGame(int tieGame) {
                this.tieGame = tieGame;
            }

            public int getLooseGame() {
                return looseGame;
            }

            public void setLooseGame(int looseGame) {
                this.looseGame = looseGame;
            }

            public int getGoalScore() {
                return goalScore;
            }

            public void setGoalScore(int goalScore) {
                this.goalScore = goalScore;
            }

            public int getGoalAgainst() {
                return goalAgainst;
            }

            public void setGoalAgainst(int goalAgainst) {
                this.goalAgainst = goalAgainst;
            }

            public int getScore() {
                return score;
            }

            public void setScore(int score) {
                this.score = score;
            }

            public int getRank() {
                return rank;
            }

            public void setRank(int rank) {
                this.rank = rank;
            }
        }

        static class Match {
            private String firstTeam, secondTeam;
            private int firstScore, secondScore;

            public Match(String firstTeam, String secondTeam, int firstScore, int secondScore) {
                this.firstTeam = firstTeam;
                this.secondTeam = secondTeam;
                this.firstScore = firstScore;
                this.secondScore = secondScore;
            }

            public static Match newMatch(String query){
                String[] eachTeam = query.trim().split("@");
                String[]firstSplit = eachTeam[0].split("#");
                String[]secondSplit = eachTeam[1].split("#");
                return new Match(firstSplit[0],  secondSplit[1], Integer.valueOf(firstSplit[1]), Integer.valueOf(secondSplit[0]));
            }

            public String getFirstTeam() {
                return firstTeam;
            }

            public void setFirstTeam(String firstTeam) {
                this.firstTeam = firstTeam;
            }

            public String getSecondTeam() {
                return secondTeam;
            }

            public void setSecondTeam(String secondTeam) {
                this.secondTeam = secondTeam;
            }

            public int getFirstScore() {
                return firstScore;
            }

            public void setFirstScore(int firstScore) {
                this.firstScore = firstScore;
            }

            public int getSecondScore() {
                return secondScore;
            }

            public void setSecondScore(int secondScore) {
                this.secondScore = secondScore;
            }
        }

----------------------------------------------------------
        299 - Train Swapping
private static Scanner sc = new Scanner(System.in);

    public static void main(String[] args) throws Exception {
        int n = sc.nextInt();
        while (n-- > 0){
            int noTrains = sc.nextInt();
            int [] array = new int[noTrains];
            int counter = 0;
            while (noTrains-- > 0){
                array[counter] = sc.nextInt();
                counter++;
            }
            System.out.println("Optimal train swapping takes " + countSwap(array) + " swaps.");
        }
    }

    private static int countSwap(int[] array) {
        int len = array.length, count = 0;
        if( len <= 1)
            return 0;

        boolean swapped = false;
        do{
            swapped = false;
            for( int i = 1; i < len; i++){
                if(array[i-1] > array[i]){
                    swap(array, i-1, i);
                    swapped = true;
                    count++;
                }
            }
            len--;
        }while (swapped);
        return count;
    }

    private static void swap(int[] array, int i, int index) {
        int temp = array[i];
        array[i] = array[index];
        array[index] = temp;
    }

----------------------------------------------------------


----------------------------------------------------------


----------------------------------------------------------


----------------------------------------------------------


----------------------------------------------------------

----------------------------------------------------------


