   02/12 UVA 100 The 3n + 1 problem
- Problem : some time output 0 > wrong because assume that i <= j, which is wrong
- use sc.hasNextInt() to read input

My Own answer code
    public static void main(String [] args) throws  Exception{
        Scanner sc = new Scanner(new FileReader("in.txt"));
        StringBuilder sb = new StringBuilder();
        while (sc.hasNextInt()){
            int a = sc.nextInt();
            int b = sc.nextInt();
            int i = a < b ? a : b;
            int j = a >= b ? a : b;
            int max = 0 , current;
            for ( int k = i; k <= j; k++){
                current = check(k);
                if (current > max)
                    max = current;
            }
//            System.out.println(i + " " + j + " " + max);
            sb.append(i + " " + j + " " + max + System.lineSeparator());  [WRONG]
        }
        writeOutput(sb);
        System.out.println("compare: " + checkOutput());

    }
    public static int check(int n){
        int count = 1;
        while (n != 1){
            if( n %2 ==0 )
                n = n/2;
            else n = 3 * n + 1;
            count ++;
        }
        return count;
    }
    public static int checkOutput(){
        String expected = null, output = null, line;
        BufferedReader reader = null;
        Charset charset = Charset.forName("US-ASCII");
        StringBuilder sb = new StringBuilder();
        Path expectedFile = Paths.get("expected.txt");
        Path outputFile = Paths.get("out.txt");
        try{
            reader = Files.newBufferedReader(expectedFile, charset);
            while ( (line = reader.readLine()) != null){
                sb.append(line + System.lineSeparator());
            }
            expected = sb.toString();
//            System.out.println("Expected: " + expected);
            sb = new StringBuilder();
            reader = Files.newBufferedReader(outputFile, charset);
            while ( (line = reader.readLine()) != null){
                sb.append(line + System.lineSeparator());
            }
            output = sb.toString();
//            System.out.println("Output: " + output);

        }catch (IOException x){
            System.err.format("IO Exception %s%n", x);
        }
        return output.compareTo(expected);

    }
    public static void writeOutput(StringBuilder sb){
        Charset charset = Charset.forName("US-ASCII");
        Path outputFile = Paths.get("out.txt");
        String output = sb.toString();
        try {
            BufferedWriter bufferedWriter = Files.newBufferedWriter(outputFile, charset);
            bufferedWriter.write(output, 0, output.length());
            bufferedWriter.close();
        } catch (IOException x) {
            System.err.format("IOException: %s%n", x);
        }
    }
- Sample code
// @JUDGE_ID:  1000AA  100  Java  "Easy algorithm"

import java.io.*;
import java.util.*;

class Main
{
    static String ReadLn (int maxLg)  // utility function to read from stdin
    {
        byte lin[] = new byte [maxLg];
        int lg = 0, car = -1;
        String line = "";

        try
        {
            while (lg < maxLg)
            {
                car = System.in.read();
                if ((car < 0) || (car == '\n')) break;
                lin [lg++] += car;
            }
        }
        catch (IOException e)
        {
            return (null);
        }

        if ((car < 0) && (lg == 0)) return (null);  // eof
        return (new String (lin, 0, lg));
    }

    public static void main (String args[])  // entry point from OS
    {
        Main myWork = new Main();  // create a dinamic instance
        myWork.Begin();            // the true entry point
    }

    void Begin()
    {
        String input;
        StringTokenizer idata;
        int a, b, min, max, num, n, cycle, cyclemax;

        while ((input = Main.ReadLn (255)) != null)
        {
          idata = new StringTokenizer (input);
          a = Integer.parseInt (idata.nextToken());
          b = Integer.parseInt (idata.nextToken());
          if (a < b) { min=a; max=b; } else { min=b; max=a; }
          for (cyclemax=-1, num=min; num<=max; num++) {
            for (n=num, cycle=1; n != 1; cycle++) if ((n % 2) != 0) n=3*n+1; else n >>= 1;
            if (cycle > cyclemax) cyclemax=cycle;
            }
          System.out.println (a + " " + b + " " + cyclemax);
        }
    }
}
------------------------------------------
   UVA 272	TEX Quotes
public static void main (String args[])  // entry point from OS
    {
        Scanner sc = new Scanner(System.in);
        String line, temp;
        char [] chars;
        StringBuilder sb;

        boolean first = false;
        while (sc.hasNext()){
            line = sc.nextLine();
            chars = line.toCharArray();
            sb = new StringBuilder();
            for (int i = 0 ; i < chars.length; i++){
                if( chars[i] == '"'){
                    first = !first;
                    temp = first ? "``" : "''";
                    sb.append(temp);
                }else {
                    sb.append(chars[i]);
                }
            }
            System.out.println(sb.toString());
        }
    }
--------------------------------------------------------------
    UVA 394	Mapmaker
 public static void main (String args[])  throws Exception// entry point from OS
    {
        Scanner sc = new Scanner(System.in);
        int N, R;
        String line, updateLine;
        String [] ar;
        String name, indexString;
        int base, Cd, D, count, index;
        Element element;
        Map<String, Element> map = new HashMap<String, Element>();
        int[][] array;
        int [] addressIndex;
        N = sc.nextInt();
        R = sc.nextInt();
        line = sc.nextLine();
        while (N-- > 0){
            line = sc.nextLine();
            line = line.trim().replaceAll("( )+", " ");
            ar = line.split(" ");

            name = ar[0];
            base = Integer.parseInt(ar[1]);
            Cd = Integer.parseInt(ar[2]);
            D = Integer.parseInt(ar[3]);
            array = new int[D][2];
            for( count = 4, index = 0; index<D; index++){
                array[index][0] = Integer.parseInt(ar[count++]);
                array[index][1] = Integer.parseInt(ar[count++]);
            }
            element = new Element(name, base, Cd, D, array);
            map.put(name, element);
        }
        while (R -- > 0){
            line = sc.nextLine();
            line = line.trim().replaceAll("( )+", " ");
            ar = line.split(" ");

            name = ar[0];
            indexString ="[";
            addressIndex = new int[ar.length -1];
            for( count = 1, index = 0; index<ar.length -1 ; index++){
                addressIndex[index] = Integer.parseInt(ar[count++]);
                indexString += String.valueOf(addressIndex[index]);
                if(index != ar.length -2 ) indexString += ", ";
            }
            indexString += "] = ";
            Element ele = map.get(name);
            if(ele != null)
                System.out.println( name + indexString + ele.address(addressIndex));
        }
    }

     static void print(Element element) {
        System.out.println("name: " + element.name);
        for ( int i = 0 ; i < element.D; i++){
            System.out.println("array: " + element.UpperLower[i][0] + " " + element.UpperLower[i][1]);
        }
    }

     static class Element{
        String name;
        int base;
        int Cd;
        int D;
        int[][] UpperLower;
        int[] CArray;
        int C0;
         Element(String name, int base, int Cd, int D, int[][] array){
            this.name = name;
            this.base = base;
            this.Cd = Cd;
            this.D = D;
            this.UpperLower = array;
            this.CArray = new int[D + 1];
            CArray[D] = Cd;
            int sum = Cd * UpperLower[D-1][0];
            for( int i = D-1; i >= 1; i--){
                CArray[i] = CArray[i+1] * (UpperLower[i][1] - UpperLower[i][0] + 1);
                sum += CArray[i] * UpperLower[i-1][0];
            }
            C0 = base - sum;
        }
         int address(int [] array){
            int sum = 0 ;
            for ( int i = 0 ; i < array.length; i++){
                sum += array[i] * CArray[i+1];
            }
            return C0 + sum;
        }
    }
---------------------------------------------------------------

----------------------------------------------------------


----------------------------------------------------------


----------------------------------------------------------


----------------------------------------------------------


----------------------------------------------------------


----------------------------------------------------------


----------------------------------------------------------


----------------------------------------------------------


----------------------------------------------------------


----------------------------------------------------------


----------------------------------------------------------


----------------------------------------------------------


----------------------------------------------------------

----------------------------------------------------------


